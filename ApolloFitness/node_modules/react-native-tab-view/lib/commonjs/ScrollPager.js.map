{"version":3,"sources":["ScrollPager.tsx"],"names":["event","Animated","divide","Value","ScrollPager","initialOffset","x","props","navigationState","index","layout","width","y","interactionHandle","scrollViewRef","React","createRef","jumpTo","key","keyboardDismissMode","onIndexChange","routes","findIndex","route","scrollTo","Keyboard","dismiss","animated","current","getNode","enterListeners","addListener","type","listener","push","removeListener","indexOf","splice","position","onScroll","nativeEvent","contentOffset","layoutWidthNode","relativePosition","prevProps","offset","length","setValue","InteractionManager","clearInteractionHandle","children","onSwipeStart","onSwipeEnd","overscroll","handleSwipeStart","createInteractionHandle","handleSwipeEnd","render","swipeEnabled","styles","container","flexDirection","flex","Component","defaultProps","bounces","StyleSheet","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Props } from './Pager';\nimport { Route, Listener } from './types';\n\nconst { event, divide, Value } = Animated;\n\ntype State = {\n  initialOffset: { x: number; y: number };\n};\n\nexport default class ScrollPager<T extends Route> extends React.Component<\n  Props<T> & { overscroll?: boolean },\n  State\n> {\n  static defaultProps = {\n    bounces: true,\n  };\n\n  componentDidMount() {\n    if (this.props.layout.width) {\n      this.scrollTo(\n        this.props.navigationState.index * this.props.layout.width,\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const offset = this.props.navigationState.index * this.props.layout.width;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        this.props.navigationState.routes.length ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this.scrollTo(offset, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this.scrollTo(offset);\n    }\n\n    if (prevProps.layout.width !== this.props.layout.width) {\n      this.layoutWidthNode.setValue(this.props.layout.width);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  private initialOffset = {\n    x: this.props.navigationState.index * this.props.layout.width,\n    y: 0,\n  };\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(route => route.key === key);\n\n    if (navigationState.index === index) {\n      this.scrollTo(index * this.props.layout.width);\n    } else {\n      onIndexChange(index);\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private scrollTo = (x: number, animated = true) => {\n    if (this.scrollViewRef.current) {\n      this.scrollViewRef.current.getNode().scrollTo({\n        x,\n        animated: animated,\n      });\n    }\n  };\n\n  private enterListeners: Listener[] = [];\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private position = new Animated.Value(\n    this.props.navigationState.index * this.props.layout.width\n  );\n\n  private onScroll = event([\n    {\n      nativeEvent: {\n        contentOffset: {\n          x: this.position,\n        },\n      },\n    },\n  ]);\n\n  private layoutWidthNode = new Value(this.props.layout.width);\n\n  private relativePosition = divide(this.position, this.layoutWidthNode);\n\n  render() {\n    const {\n      children,\n      layout,\n      onSwipeStart,\n      onSwipeEnd,\n      overscroll,\n      navigationState,\n    } = this.props;\n\n    const handleSwipeStart = () => {\n      onSwipeStart?.();\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    };\n\n    const handleSwipeEnd = () => {\n      onSwipeEnd?.();\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    };\n\n    return children({\n      position: this.relativePosition,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <Animated.ScrollView\n          pagingEnabled\n          directionalLockEnabled\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps=\"always\"\n          overScrollMode=\"never\"\n          scrollToOverflowEnabled\n          scrollEnabled={this.props.swipeEnabled}\n          automaticallyAdjustContentInsets={false}\n          bounces={overscroll}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          scrollEventThrottle={1}\n          onScroll={this.onScroll}\n          onScrollBeginDrag={handleSwipeStart}\n          onScrollEndDrag={handleSwipeEnd}\n          onMomentumScrollEnd={this.onScroll}\n          contentOffset={this.initialOffset}\n          style={styles.container}\n          contentContainerStyle={\n            layout.width\n              ? {\n                  flexDirection: 'row',\n                  width: layout.width * navigationState.routes.length,\n                  flex: 1,\n                }\n              : null\n          }\n          ref={this.scrollViewRef}\n        >\n          {children}\n        </Animated.ScrollView>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}