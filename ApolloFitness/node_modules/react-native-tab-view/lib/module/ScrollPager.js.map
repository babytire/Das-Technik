{"version":3,"sources":["ScrollPager.tsx"],"names":["React","StyleSheet","Keyboard","InteractionManager","Animated","event","divide","Value","ScrollPager","initialOffset","x","props","navigationState","index","layout","width","y","interactionHandle","scrollViewRef","createRef","jumpTo","key","keyboardDismissMode","onIndexChange","routes","findIndex","route","scrollTo","dismiss","animated","current","getNode","enterListeners","addListener","type","listener","push","removeListener","indexOf","splice","position","onScroll","nativeEvent","contentOffset","layoutWidthNode","relativePosition","prevProps","offset","length","setValue","clearInteractionHandle","children","onSwipeStart","onSwipeEnd","overscroll","handleSwipeStart","createInteractionHandle","handleSwipeEnd","render","swipeEnabled","styles","container","flexDirection","flex","Component","defaultProps","bounces","create"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { Props } from './Pager';\nimport { Route, Listener } from './types';\n\nconst { event, divide, Value } = Animated;\n\ntype State = {\n  initialOffset: { x: number; y: number };\n};\n\nexport default class ScrollPager<T extends Route> extends React.Component<\n  Props<T> & { overscroll?: boolean },\n  State\n> {\n  static defaultProps = {\n    bounces: true,\n  };\n\n  componentDidMount() {\n    if (this.props.layout.width) {\n      this.scrollTo(\n        this.props.navigationState.index * this.props.layout.width,\n        false\n      );\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const offset = this.props.navigationState.index * this.props.layout.width;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        this.props.navigationState.routes.length ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this.scrollTo(offset, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this.scrollTo(offset);\n    }\n\n    if (prevProps.layout.width !== this.props.layout.width) {\n      this.layoutWidthNode.setValue(this.props.layout.width);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.interactionHandle !== null) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n    }\n  }\n\n  private initialOffset = {\n    x: this.props.navigationState.index * this.props.layout.width,\n    y: 0,\n  };\n\n  // InteractionHandle to handle tasks around animations\n  private interactionHandle: number | null = null;\n\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(route => route.key === key);\n\n    if (navigationState.index === index) {\n      this.scrollTo(index * this.props.layout.width);\n    } else {\n      onIndexChange(index);\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private scrollTo = (x: number, animated = true) => {\n    if (this.scrollViewRef.current) {\n      this.scrollViewRef.current.getNode().scrollTo({\n        x,\n        animated: animated,\n      });\n    }\n  };\n\n  private enterListeners: Listener[] = [];\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private position = new Animated.Value(\n    this.props.navigationState.index * this.props.layout.width\n  );\n\n  private onScroll = event([\n    {\n      nativeEvent: {\n        contentOffset: {\n          x: this.position,\n        },\n      },\n    },\n  ]);\n\n  private layoutWidthNode = new Value(this.props.layout.width);\n\n  private relativePosition = divide(this.position, this.layoutWidthNode);\n\n  render() {\n    const {\n      children,\n      layout,\n      onSwipeStart,\n      onSwipeEnd,\n      overscroll,\n      navigationState,\n    } = this.props;\n\n    const handleSwipeStart = () => {\n      onSwipeStart?.();\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    };\n\n    const handleSwipeEnd = () => {\n      onSwipeEnd?.();\n      if (this.interactionHandle !== null) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n      }\n    };\n\n    return children({\n      position: this.relativePosition,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <Animated.ScrollView\n          pagingEnabled\n          directionalLockEnabled\n          keyboardDismissMode=\"on-drag\"\n          keyboardShouldPersistTaps=\"always\"\n          overScrollMode=\"never\"\n          scrollToOverflowEnabled\n          scrollEnabled={this.props.swipeEnabled}\n          automaticallyAdjustContentInsets={false}\n          bounces={overscroll}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          scrollEventThrottle={1}\n          onScroll={this.onScroll}\n          onScrollBeginDrag={handleSwipeStart}\n          onScrollEndDrag={handleSwipeEnd}\n          onMomentumScrollEnd={this.onScroll}\n          contentOffset={this.initialOffset}\n          style={styles.container}\n          contentContainerStyle={\n            layout.width\n              ? {\n                  flexDirection: 'row',\n                  width: layout.width * navigationState.routes.length,\n                  flex: 1,\n                }\n              : null\n          }\n          ref={this.scrollViewRef}\n        >\n          {children}\n        </Animated.ScrollView>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}