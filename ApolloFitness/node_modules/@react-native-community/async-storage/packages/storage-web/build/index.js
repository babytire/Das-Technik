"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _idbKeyval = require("idb-keyval");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class WebStorage {
  constructor(storageType = 'idb') {
    _defineProperty(this, "storage", void 0);

    if (storageType === 'idb') {
      this.storage = {
        name: storageType,
        getItem: _idbKeyval.get,
        setItem: _idbKeyval.set,
        deleteItem: _idbKeyval.del,
        keys: _idbKeyval.keys,
        clear: _idbKeyval.clear
      };
    } else {
      const webStorage = storageType === 'local' ? window.localStorage : window.sessionStorage;
      this.storage = {
        name: storageType,
        getItem: webStorage.getItem.bind(webStorage),
        setItem: webStorage.setItem.bind(webStorage),
        deleteItem: webStorage.removeItem.bind(webStorage),
        keys: () => Object.keys(webStorage),
        clear: webStorage.clear.bind(webStorage)
      };
    }
  }

  async getSingle(key) {
    return this.storage.getItem(key);
  }

  async setSingle(key, value) {
    return this.storage.setItem(key, value);
  }

  async getMany(keys) {
    if (this.storage.name === 'idb') {
      return Promise.all(keys.map(key => this.storage.getItem(key))).then(readValues => readValues.reduce((values, currentValue, currentIndex) => {
        const key = keys[currentIndex];
        return _objectSpread({}, values, {
          [key]: currentValue
        });
      }, {}));
    }

    return keys.reduce((storageValues, key) => {
      return _objectSpread({}, storageValues, {
        [key]: this.storage.getItem(key)
      });
    }, {});
  }

  async setMany(values) {
    for (let keyValue of values) {
      const key = Object.getOwnPropertyNames(keyValue)[0];

      if (!key) {
        continue;
      }

      await this.storage.setItem(key, keyValue[key]);
    }
  }

  async removeSingle(key) {
    return this.storage.deleteItem(key);
  }

  async removeMany(keys) {
    if (this.storage.name === 'idb') {
      for (const key of keys) {
        await this.storage.deleteItem(key);
      }
    } else {
      await Promise.all(keys.map(k => this.storage.deleteItem(k)));
    }
  }

  async getKeys() {
    return this.storage.keys();
  }

  async dropStorage() {
    return this.storage.clear();
  }

}

var _default = WebStorage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,