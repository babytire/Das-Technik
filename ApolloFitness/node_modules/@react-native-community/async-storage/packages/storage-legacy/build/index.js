"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function convertErrors(errs) {
  if (!errs) {
    return null;
  }

  return Array.isArray(errs) ? errs.filter(e => !!e) : [errs];
}

function checkValidInput(usedKey, value) {
  const isValuePassed = arguments.length > 1;

  if (typeof usedKey !== 'string') {
    console.warn(`[AsyncStorageLegacy] Using "${typeof usedKey}" type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\nKey passed: ${usedKey}\n`);
  }

  if (isValuePassed && typeof value !== 'string') {
    if (value == null) {
      throw new Error(`[AsyncStorageLegacy] Passing "null" or "undefined" as value is not supported. If you need to remove a value, use ".removeSingle" method instead.\nUsed key: ${usedKey}\n`);
    } else {
      console.warn(`[AsyncStorageLegacy] The value for key "${usedKey}" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\nPassed value: ${value}\nPassed key: ${usedKey}\n`);
    }
  }
}

class LegacyAsyncStorage {
  constructor() {
    _defineProperty(this, "_asyncStorageNativeModule", void 0);

    this._asyncStorageNativeModule = _reactNative.NativeModules.RNC_AsyncSQLiteDBStorage || _reactNative.NativeModules.RNCAsyncStorage;

    if (!this._asyncStorageNativeModule) {
      throw new Error('[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.');
    }
  }

  async getSingle(key, _) {
    checkValidInput(key);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiGet([key], function (errors, result) {
        const value = result && result[0] && result[0][1] || null;
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  }

  async setSingle(key, value, _) {
    checkValidInput(key, value);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiSet([[key, value]], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async getMany(keys, _) {
    keys.forEach(k => checkValidInput(k));
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiGet(keys, function (errors, result) {
        const value = result.reduce((acc, current) => {
          const key = current[0];
          const val = current[1] || null;
          return _objectSpread({}, acc, {
            [key]: val
          });
        }, {});
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  }

  async setMany(values, _) {
    values.forEach(keyValue => {
      Object.keys(keyValue).forEach(key => {
        checkValidInput(key, keyValue[key]);
      });
    });
    return new Promise((resolve, reject) => {
      const valuesArray = values.map(entry => {
        return [Object.keys(entry)[0], entry];
      });

      this._asyncStorageNativeModule.multiSet([valuesArray], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async removeSingle(key, _) {
    checkValidInput(key);
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiRemove([key], function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async removeMany(keys, _) {
    keys.forEach(k => checkValidInput(k));
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.multiRemove(keys, function (errors) {
        const errs = convertErrors(errors);

        if (errs && errs.length) {
          reject(errs[0]);
        } else {
          resolve();
        }
      });
    });
  }

  async getKeys(_) {
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.getAllKeys(function (errors, keys) {
        const err = convertErrors(errors);

        if (err && err.length) {
          reject(err[0]);
        } else {
          resolve(keys);
        }
      });
    });
  }

  async dropStorage(_) {
    return new Promise((resolve, reject) => {
      this._asyncStorageNativeModule.clear(function (error) {
        const err = convertErrors(Array.isArray(error) ? error : [error]);

        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }

}

exports.default = LegacyAsyncStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,